import { TTTDBG } from "./bst/problems/serialize-and-deserialize";
import { DBG } from "./linked_list/add-two-numbers";

const problems_md = [
  "Two Sum",
  "Longest Substring Without Repeating Characters",
  "Longest Palindromic Substring",
  "Palindrome Number",
  "Valid Parentheses",
  "Generate Parentheses",
  "Merge k Sorted Lists",
  "Remove Element",
  "Find the Index of the First Occurrence in a String",
  "Search in Rotated Sorted Array",
  "Trapping Rain Water",
  "Group Anagrams",
  "Merge Intervals",
  "Simplify Path",
  "Minimum Window Substring",
  "Merge Sorted Array",
  "Validate Binary Search Tree",
  "Symmetric Tree",
  "Maximum Depth of Binary Tree",
  "Best Time to Buy and Sell Stock",
  "Binary Tree Maximum Path Sum",
  "Valid Palindrome",
  "Single Number",
  "LRU Cache",
  "Evaluate Reverse Polish Notation",
  "Min Stack",
  "One Edit Distance",
  "Majority Element",
  "Binary Tree Right Side View",
  "Number of Islands",
  "Isomorphic Strings",
  "Reverse Linked List",
  "Summary Ranges",
  "Lowest Common Ancestor of a Binary Tree",
  "Product of Array Except Self",
  "Meeting Rooms II",
  "Move Zeroes",
  "Longest Increasing Subsequence",
  "Remove Invalid Parentheses",
  "Reconstruct Itinerary",
  "Longest Substring with At Most K Distinct Characters",
  "Flatten Nested List Iterator",
  "Intersection of Two Arrays",
  "Intersection of Two Arrays II",
  "Line Reflection",
  "Design Hit Counter",
  "Insert Delete GetRandom O(1)",
  "Is Subsequence",
  "Find All Anagrams in a String",
  "String Compression",
  "Max Consecutive Ones",
  "Max Consecutive Ones II",
  "Subarray Sum Equals K",
  "Permutation in String",
  "Find Duplicate Subtrees",
  "Robot Return to Origin",
  "Find K Closest Elements",
  "Valid Palindrome II",
  "Maximize Distance to Closest Person",
  "Number of Recent Calls",
  "Squares of a Sorted Array",
  "Interval List Intersections",
  "Max Consecutive Ones III",
  "Sort the Matrix Diagonally",
  "Destination City",
  "Longest Subarray of 1's After Deleting One Element",
  "Design an ATM Machine",
  "Promise Pool",
  "Flatten Deeply Nested Array",
  "Find the Prefix Common Array of Two Arrays",
  "Event Emitter"
];


const problems = [
  "Zigzag Iterator",
  "Max Consecutive Ones II",
  "Move Zeroes",
  "Valid Palindrome",
  "Number of Recent Calls",
  "Max Consecutive Ones III",
  "Insert Delete GetRandom O(1)",
  "Summary Ranges",
  "Merge Intervals",
  "LRU Cache",
  "Valid Parentheses",
  "Generate Parentheses",
  "Validate Binary Search Tree",
  "Group Anagrams",
  "Reverse Linked List",
  "Permutation in String",
  "Evaluate Reverse Polish Notation",
  "String Compression",
  "Reconstruct Itinerary",
  "Perfect Squares",
  "Merge k Sorted Lists",
  "Merge Two Sorted Lists",
  "Merge Sorted Array",
  "Longest Substring Without Repeating Characters",
  "Intersection of Two Arrays II",
  "Two Sum",
  "Subarray Sum Equals K",
  "Symmetric Tree",
  "Search in Rotated Sorted Array"
];

const problems_2 = [
  "Zigzag Iterator",
  "Move Zeroes",
  "Max Consecutive Ones II",
  "Valid Palindrome",
  "Group Anagrams",
  "LRU Cache",
  "Reverse Linked List",
  "Generate Parentheses",
  "Insert Delete GetRandom O(1)",
  "Max Consecutive Ones III",
  "Number of Recent Calls",
  "Validate Binary Search Tree",
  "Merge Intervals",
  "Valid Parentheses",
  "Merge Two Sorted Lists",
  "Spiral Matrix II",
  "Subarray Sums Divisible by K",
  "Permutation in String",
  "Summary Ranges",
  "Reconstruct Itinerary",
  "Two Sum",
  "Merge Sorted Array",
  "Subarray Sum Equals K",
  "Merge k Sorted Lists",
  "Serialize and Deserialize BST",
  "Add Two Numbers",
  "Simplify Path",
  "Evaluate Reverse Polish Notation",
  "String Compression",
  "Symmetric Tree",
  "Rotate Image",
  "Implement Queue using Stacks",
  "Trapping Rain Water",
  "Perfect Squares",
  "3Sum",
  "3Sum Closest",
  "Search in Rotated Sorted Array",
  "Count Primes",
  "Remove Nth Node From End of List",
  "Longest Substring Without Repeating Characters",
  "Intersection of Two Arrays II",
  "Longest Palindromic Substring",
  "Find First and Last Position of Element in Sorted Array",
  "Implement strStr()",
  "Median of Two Sorted Arrays"
];

const problems_3 = [
  "Max Consecutive Ones II",
  "Zigzag Iterator",
  "Move Zeroes",
  "Permutation in String",
  "Evaluate Reverse Polish Notation",
  "Merge Intervals",
  "Insert Delete GetRandom O(1)",
  "Perfect Squares",
  "Validate Binary Search Tree",
  "Merge Two Sorted Lists",
  "LRU Cache",
  "Generate Parentheses",
  "Valid Palindrome",
  "Group Anagrams",
  "Search in Rotated Sorted Array",
  "Merge Sorted Array",
  "Reverse Linked List",
  "Longest Substring Without Repeating Characters"
];
const problems_4 = [
  "LRU Cache",
  "Summary Ranges",
  "Reverse Linked List",
  "Valid Palindrome",
  "Generate Parentheses",
  "Two Sum",
  "Move Zeroes",
  "Valid Parentheses",
  "Group Anagrams",
  "Merge k Sorted Lists",
  "Zigzag Iterator",
  "String Compression",
  "Subarray Sum Equals K",
  "Merge Intervals",
  "Max Consecutive Ones III",
  "Validate Binary Search Tree",
  "Insert Delete GetRandom O(1)",
  "Implement Queue using Stacks",
  "Permutation in String",
  "Max Consecutive Ones II",
  "Merge Two Sorted Lists",
  "Spiral Matrix II",
  "Longest Substring Without Repeating Characters",
  "Trapping Rain Water",
  "Add Two Numbers",
  "Merge Sorted Array",
  "Symmetric Tree",
  "Reconstruct Itinerary",
  "Number of Recent Calls",
  "Median of Two Sorted Arrays",
  "Subarray Sums Divisible by K",
  "Count Primes",
  "Longest Palindromic Substring",
  "3Sum",
  "Serialize and Deserialize BST",
  "Rotate Image",
  "Search in Rotated Sorted Array",
  "Remove Nth Node From End of List",
  "Simplify Path",
  "Evaluate Reverse Polish Notation",
  "Intersection of Two Arrays II",
  "Find First and Last Position of Element in Sorted Array",
  "Perfect Squares",
  "Implement strStr()",
  "3Sum Closest",
  "Longest Subarray of 1's After Deleting One Element"
];

(() => {
  const unionNew = new Set([...problems, ...problems_2, ...problems_3, ...problems_4]);
  const unionOld = new Set(problems_md);
  
  for(const task of unionNew.values()){
    if(unionOld.has(task)){
      unionNew.delete(task)
    }
  }
  console.log(Array.from(unionNew))
})()

DBG()






