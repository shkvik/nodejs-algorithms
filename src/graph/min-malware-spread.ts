function minMalwareSpread(graph: number[][], initial: number[]): number {
  const nodeStates = new Array(graph.length).fill(null);
  for (const node of initial) {
    nodeStates[node] = -1;
  }
  function scan(initialNode: number) {
    nodeStates[initialNode] = null;
    function dfs(node: number) {
      if (nodeStates[node] === initialNode || nodeStates[node] < 0) {
        return;
      }
      if (nodeStates[node] === null && node !== initialNode) {
        nodeStates[node] = initialNode;
        nodeStates[initialNode]--;
      } else {
        if (nodeStates[node] !== null) {
          nodeStates[nodeStates[node]]++;
        }
        nodeStates[node] = -1;
      }
      const edges = graph[node];
      for (let i = 0; i < edges.length; i++) {
        if (!!edges[i]) {
          dfs(i);
        }
      }
    }
    return dfs(initialNode);
  }

  for (const node of initial) {
    scan(node);
  }
  let maxNode = initial[0];

  for (let n = 0, i = initial[n]; n < initial.length; i = initial[++n]) {
    if (nodeStates[i] < nodeStates[maxNode] || (nodeStates[i] === nodeStates[maxNode] && i < maxNode)) {
      maxNode = i;
    }
  }

  return maxNode;
}



export function minMalwareSpreadDBG() {
  const tests = [
    {
      input: {
        graph: [
          [1, 1, 0],
          [1, 1, 0],
          [0, 0, 1]
        ],
        initial: [0, 1]
      },
      expected: 0 // Удаление узла 0 минимизирует распространение
    },
    {
      input: {
        graph: [
          [1, 0, 0],
          [0, 1, 0],
          [0, 0, 1]
        ],
        initial: [0, 2]
      },
      expected: 0 // Удаление узла 0 минимизирует распространение
    },
    {
      input: {
        graph: [
          [1, 1, 1],
          [1, 1, 1],
          [1, 1, 1]
        ],
        initial: [0, 1, 2]
      },
      expected: 0 // Удаление любого узла не поможет, выбираем минимальный индекс
    }
  ];

  tests.forEach((testCase, index) => {
    const result = minMalwareSpread(testCase.input.graph, testCase.input.initial);
    const success = result === testCase.expected;
    if (success) {
      console.log(`Test ${index} success`);
    } else {
      console.log(`Test ${index} fail`);
      console.log(`expected: ${testCase.expected}`);
      console.log(`got: ${result}`);
    }
  });

}
